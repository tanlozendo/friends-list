{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","length","map","SearchBox","placeholder","handleChange","type","onChange","App","props","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,kBAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAK,UACLC,IAAG,+BAA0BH,EAAQI,GAAlC,4BAEL,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,aCPLC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,qBAAKP,UAAU,YAAf,SACGO,EAASC,OACRD,EAASE,KAAI,SAACV,GACZ,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,OAG5B,uCAAQI,EAASC,OAAjB,2BCTKE,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,mCACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,QC6BHG,E,kDAjCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXV,SAAU,GACVW,YAAa,IAJE,E,gEAQE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEjB,SAAUgB,S,+BAGrC,IAAD,SAC2BE,KAAKR,MAA/BV,EADD,EACCA,SAAUW,EADX,EACWA,YACZQ,EAAmBnB,EAASoB,QAAO,SAAC5B,GAAD,OACvCA,EAAQK,KAAKwB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,6BACA,cAAC,EAAD,CACEW,YAAa,qBACbC,aAAc,SAACkB,GAAD,OAAO,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE7D,cAAC,EAAD,CAAUzB,SAAUmB,W,GA5BVO,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c3cc6235.chunk.js","sourcesContent":["import './card.styles.css';\n\nexport const Card = ({ monster }) => {\n  return (\n    <div className='card-container'>\n      <img\n        alt={'monster'}\n        src={`https://robohash.org/${monster.id}?set=set5&size=180x180`}\n      />\n      <h1>{monster.name}</h1>\n      <p>{monster.email}</p>\n    </div>\n  );\n};\n","import './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = ({ monsters }) => {\n  return (\n    <div className='card-list'>\n      {monsters.length ? (\n        monsters.map((monster) => {\n          return <Card key={monster.id} monster={monster} />;\n        })\n      ) : (\n        <h3>{`${monsters.length} found in database`}</h3>\n      )}\n    </div>\n  );\n};\n","import './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <>\n      <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </>\n  );\n};\n","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './component/card-list/card-list.component';\nimport { SearchBox } from './component/search-box/search-box.component';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1 className='title'>Friends Profile</h1>\n        <SearchBox\n          placeholder={'Search for Monster'}\n          handleChange={(e) => this.setState({ searchField: e.target.value })}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}